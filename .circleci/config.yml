version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.3
  aws-ecr: circleci/aws-ecr@8.1.3
  aws-eks: circleci/aws-eks@2.2.0
  slack: circleci/slack@4.10.1

executors:
  python38:
    docker:
      - image: cimg/python:3.8
    resource_class: medium

workflows:
  build-test-deliver:
    jobs:
      # - python-check-style
      # - python-security-scan:
      #     name: scan-<<matrix.service>>
      #     context: cloudSecrets
      #     matrix:
      #       parameters:
      #         service: [contacts, userservice]
      # - python-unit-tests:
      #     name: test-<<matrix.service>>
      #     matrix:
      #       parameters:
      #         service: [contacts, userservice]
      #     requires: [python-check-style, scan-<<matrix.service>>]
      # - python-build:
      #     name: build-<<matrix.service>>
      #     context: [aws, cloudSecrets, slack]
      #     tag: <<matrix.service>>-<<pipeline.number>>
      #     matrix:
      #       parameters:
      #         service: [contacts, userservice]
      #     requires: [test-<<matrix.service>>]


      # Debug using commands; create nodegroup manually
      # - aws-eks/create-cluster:
      #     name: create-cluster
      #     context: [aws]
      #     # requires: [python-build]
      #     pre-steps:
      #       - aws-cli/setup:
      #           role-arn: $AWS_ROLE_ARN
      #     aws-region: $AWS_REGION
      #     cluster-name: $CIRCLE_PROJECT_REPONAME-$CIRCLE_USERNAME # Not required? What happens if blank?
      - create-cluster:
          context: aws
      - create-cluster-ng:
          context: aws
      # - uat:
      #     type: approval
      #     requires: [create-cluster]
      # - aws-eks/delete-cluster:
      #     name: delete-cluster
      #     context: [aws]
      #     requires: [uat]
      #     pre-steps:
      #       - aws-cli/setup:
      #           role-arn: $AWS_ROLE_ARN
      #     aws-region: $AWS_REGION
      #     cluster-name: $CIRCLE_PROJECT_REPONAME-$CIRCLE_USERNAME # Not required? What happens if blank?

jobs:
  create-cluster-ng:
    executor: aws-ecr/default
    steps:
      - aws-cli/setup:
          role-arn: $AWS_ROLE_ARN
      - aws-eks/create-cluster:
          aws-region: $AWS_REGION
          cluster-name: $CIRCLE_PROJECT_REPONAME-$CIRCLE_USERNAME-ng # Not required? What happens if blank?
      - aws-eks/delete-cluster:
          aws-region: $AWS_REGION
          cluster-name: $CIRCLE_PROJECT_REPONAME-$CIRCLE_USERNAME-ng
          when: on_fail
  create-cluster:
    executor: aws-ecr/default
    steps:
      - aws-cli/setup:
          role-arn: $AWS_ROLE_ARN
      - aws-eks/create-cluster:
          aws-region: $AWS_REGION
          cluster-name: $CIRCLE_PROJECT_REPONAME-$CIRCLE_USERNAME # Not required? What happens if blank?
          without-nodegroup: true
      - aws-eks/delete-cluster:
          aws-region: $AWS_REGION
          cluster-name: $CIRCLE_PROJECT_REPONAME-$CIRCLE_USERNAME
          when: on_fail

      
  python-build:
    parameters:
      service:
        type: string
      tag:
        type: string
    executor: aws-ecr/default
    steps:
      - checkout
      - aws-ecr/ecr-login:
          assume-web-identity: true
          registry-id: AWS_ACCOUNT_ID
          role-arn: $AWS_ROLE_ARN
          session-duration: "900"
      - run:
          name: Build and push Docker image
          command: |
            docker build -t $ECR_REPO:<<parameters.tag>> src/<<parameters.service>>
            docker push $ECR_REPO:<<parameters.tag>>
      - slack/notify
  python-check-style:
    executor: python38
    resource_class: small
    steps:
      - checkout
      - run:
          name: Check style
          command: |
            pip install pylint
            pylint --rcfile=./.pylintrc ./src/*/*.py
  python-unit-tests:
    parameters:
      service:
        type: string
    executor: python38
    parallelism: 4
    steps:
      - checkout
      - restore_cache:
          key: venv-<<parameters.service>>-{{ checksum "src/<<parameters.service>>/requirements.txt" }}
      - run:
          name: Create directory for test reports
          command: mkdir test-reports
      - run:
          name: Run unit tests
          command: |
            cd src/<<parameters.service>>
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            TEST_FILES=$(circleci tests glob "tests/test_*.py" | circleci tests split --split-by=timings)
            python -m pytest --junit-xml=test-reports/<<parameters.service>>.xml -v -p no:warnings $TEST_FILES
            deactivate
      - save_cache:
          key: venv-<<parameters.service>>-{{ checksum "src/<<parameters.service>>/requirements.txt" }}
          paths: [src/<<parameters.service>>/venv]
      - store_test_results:
          path: src/<<parameters.service>>/test-reports
      - store_artifacts:
          path: src/<<parameters.service>>/test-reports
  python-security-scan:
    parameters:
      service:
        type: string
    executor: python38
    steps:
      - checkout
      - run:
          name: Install Snyk CLI
          command: |
            if [[ ! -x "/usr/local/bin/snyk" ]]; then
              LATEST_SNYK_CLI_VERSION=$(curl https://static.snyk.io/cli/latest/version)
              echo "Downloading Snyk CLI version ${LATEST_SNYK_CLI_VERSION}"
              curl -sO --retry 6 https://static.snyk.io/cli/v${LATEST_SNYK_CLI_VERSION}/snyk-linux
              curl -sO --retry 6 https://static.snyk.io/cli/v${LATEST_SNYK_CLI_VERSION}/snyk-linux.sha256
              sha256sum -c snyk-linux.sha256
              sudo mv snyk-linux /usr/local/bin/snyk
              sudo chmod +x /usr/local/bin/snyk
            fi

            snyk config set disableSuggestions=true
            snyk auth $SNYK_TOKEN
      - restore_cache:
          key: venv-<<parameters.service>>-{{ checksum "src/<<parameters.service>>/requirements.txt" }}
      - run:
          name: Scan Python projects
          command: |
            cd src/<<parameters.service>>
            mkdir vulnerabilities
            echo "Installing dependencies for <<parameters.service>>"
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            echo "Scanning <<parameters.service>>"
            snyk test --file=requirements.txt --json-file-output=vulnerabilities/<<parameters.service>>.json --severity-threshold=high 
            deactivate
      - save_cache:
          key: venv-<<parameters.service>>-{{ checksum "src/<<parameters.service>>/requirements.txt" }}
          paths: [src/<<parameters.service>>/venv]
      - store_artifacts:
          path: src/<<parameters.service>>/vulnerabilities
