# Todo:
  # use cache for venv/ instead of workspace

version: 2.1

orbs:
  gcp-cli: circleci/gcp-cli@2.4.1
  gcp-gcr: circleci/gcp-gcr@0.15.0
  gcp-gke: circleci/gcp-gke@1.4.0
  maven: circleci/maven@1.3.0
  slack: circleci/slack@4.10.1

executors:
  base:
    docker:
      - image: cimg/base:stable
    resource_class: medium
  jdk17:
    docker:
      - image: cimg/openjdk:17.0.3
    resource_class: medium
  python38:
    docker:
      - image: cimg/python:3.8
    resource_class: medium

workflows:
  build-test-deliver:
    jobs:
      - java-check-style
      - java-security-scan:
          context: cloudSecrets
      - java-unit-tests:
          requires: [java-check-style, java-security-scan]
      - python-check-style
      - python-security-scan:
          context: cloudSecrets
          matrix:
            parameters:
              service: [contacts, userservice]
      - python-unit-tests:
          matrix:
            parameters:
              service: [contacts, userservice]
          requires: [python-check-style, python-security-scan]
      - build-images:
          context: cloudSecrets
          tag: build-<<pipeline.number>>
          requires: [java-unit-tests, python-unit-tests]
      - deploy:
          name: deploy-dev
          context: [cloudSecrets, devCluster]
          requires: [build-images]
      - slack/on-hold:
          name: notify-qa
          context: slack
          requires:
            - deploy-dev
      - qa-check:
          type: approval
          requires: [deploy-dev]
      - build-images:
          name: tag-images
          context: cloudSecrets
          tag: latest
          requires:
            - qa-check
      - deploy:
          name: deploy-prod
          context: [cloudSecrets, prodCluster]
          requires: [tag-images]
      - test-oidc:
          context: [cloudSecrets]

jobs:
  test-oidc:
    executor: base
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          environment:
            AWS_ROLE_ARN: 'arn:aws:iam::483285841698:role/olukotun-oidc-demo'
            ECR_IMAGE: 483285841698.dkr.ecr.us-east-1.amazonaws.com/olukotun-demo  # Image repository
            IMAGE_NAME: olukotun-demo-image
          name: Build and push Docker image to AWS ECR using OIDC Protocol
          command: |
            # Install AWS CLI
            sudo apt-get update
            sudo apt-get install awscli
            # use the OpenID Connect token to obtain AWS credentials
            read -r AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN \<<< \
              $(aws sts assume-role-with-web-identity \
              --role-arn ${AWS_ROLE_ARN} \
              --role-session-name "CircleCI-${CIRCLE_WORKFLOW_ID}-${CIRCLE_JOB}" \
              --web-identity-token $CIRCLE_OIDC_TOKEN \
              --duration-seconds 900 \
              --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
              --output text)
            export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN

            # Login to AWS ECR
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_IMAGE
            # Build image locally
            docker build -t ${IMAGE_NAME}:${CIRCLE_BUILD_NUM} ./src/contacts
            # Push image to ECR
            docker push $IMAGE_NAME:$CIRCLE_BUILD_NUM
  java-check-style:
    executor: jdk17
    resource_class: small
    steps:
      - checkout
      - run:
          name: Check style
          command: ./mvnw checkstyle:check
  java-unit-tests:
    executor: jdk17
    steps:
      - checkout
      - run:
          name: Create directory for test reports
          command: mkdir test-reports
      - maven/with_cache:
          verify_dependencies: false    
          steps: 
            - run: |
                ./mvnw test
                for SERVICE in "balancereader" "ledgerwriter" "transactionhistory"; do
                  echo "checking $SERVICE..."
                  # save current working dir to memory and cd to src/$SERVICE
                  pushd src/$SERVICE
                    ../../mvnw jacoco:report
                    echo "Coverage for $SERVICE:"
                    awk -F, \
                    '{ instructions += $4 + $5; covered += $5 } END \
                    { print covered, "/", instructions, " instructions covered"; \
                    print int(100*covered/instructions), "% covered" }' \
                    target/site/jacoco/jacoco.csv
                    cp target/surefire-reports/*.xml ../../test-reports
                  # return to previously saved path
                  popd
                done
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
  python-check-style:
    executor: python38
    resource_class: small
    steps:
      - checkout
      - run:
          name: Check style
          command: |
            pip install pylint
            pylint --rcfile=./.pylintrc ./src/*/*.py
  python-unit-tests:
    parameters:
      service:
        type: string
    executor: python38
    parallelism: 4
    steps:
      - checkout
      - restore_cache:
          key: venv-<<parameters.service>>-{{ checksum "src/<<parameters.service>>/requirements.txt" }}
      - run:
          name: Create directory for test reports
          command: mkdir test-reports
      - run:
          name: Run unit tests
          command: |
            cd src/<<parameters.service>>
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            TEST_FILES=$(circleci tests glob "tests/test_*.py" | circleci tests split --split-by=timings)
            python -m pytest --junit-xml=test-reports/<<parameters.service>>.xml -v -p no:warnings $TEST_FILES
            deactivate
      - save_cache:
          key: venv-<<parameters.service>>-{{ checksum "src/<<parameters.service>>/requirements.txt" }}
          paths: [src/<<parameters.service>>/venv]
      - store_test_results:
          path: src/<<parameters.service>>/test-reports
      - store_artifacts:
          path: src/<<parameters.service>>/test-reports
  build-images:
    parameters:
      tag:
        type: string
    executor: jdk17
    resource_class: large
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - run:
          name: Install skaffold
          command: |
            curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64 && \
            sudo install skaffold /usr/local/bin/
      - gcp-cli/install:
          version: "402.0.0"
      - gcp-cli/initialize
      - gcp-gcr/gcr-auth:
          registry-url: us-west2-docker.pkg.dev
      - run:
          name: Build and deliver images
          command: |
            # https://github.com/AwesomeCICD/bank-of-aion/blob/main/.circleci/config.yml#L117
            ./mvnw jib:_skaffold-fail-if-jib-out-of-date -Djib.requiredVersion=1.4.0 --projects src/ledgerwriter --also-make jib:_skaffold-files-v2 --quiet --batch-mode
            skaffold config set --global local-cluster false
            skaffold config set --global default-repo us-west2-docker.pkg.dev/olukotun-demo/boa
            skaffold build --tag=$CIRCLE_SHA1   
            skaffold build --tag=<<parameters.tag>>
  deploy:
    executor: jdk17
    resource_class: small
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - run:
          name: Install skaffold
          command: |
            curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64 && \
            sudo install skaffold /usr/local/bin/
      - gcp-cli/install:
          version: "402.0.0"
      - gcp-cli/initialize
      - gcp-gcr/gcr-auth:
          registry-url: us-west2-docker.pkg.dev
      - gcp-gke/install
      - gcp-gke/update-kubeconfig-with-credentials:
          cluster: $CLUSTER
      - run:
          name: Deploy images
          command: |
            skaffold config set --global local-cluster false
            skaffold config set --global default-repo us-west2-docker.pkg.dev/olukotun-demo/boa
            skaffold deploy --kubeconfig=$HOME/.kube/config --namespace=$NAMESPACE --tag=$CIRCLE_SHA1
      - run:
          name: Wait for frontend
          command: kubectl --namespace $NAMESPACE wait --for condition=Available=True --timeout=300s deployment/frontend
      - run:
          name: Get external IP
          command: kubectl --namespace $NAMESPACE get service frontend | awk '{print $4}'
  java-security-scan:
    executor: jdk17
    steps:
      - checkout
      - run:
          name: Install Snyk CLI
          command: |
            if [[ ! -x "/usr/local/bin/snyk" ]]; then
              LATEST_SNYK_CLI_VERSION=$(curl https://static.snyk.io/cli/latest/version)
              echo "Downloading Snyk CLI version ${LATEST_SNYK_CLI_VERSION}"
              curl -sO --retry 6 https://static.snyk.io/cli/v${LATEST_SNYK_CLI_VERSION}/snyk-linux
              curl -sO --retry 6 https://static.snyk.io/cli/v${LATEST_SNYK_CLI_VERSION}/snyk-linux.sha256
              sha256sum -c snyk-linux.sha256
              sudo mv snyk-linux /usr/local/bin/snyk
              sudo chmod +x /usr/local/bin/snyk
            fi

            snyk config set disableSuggestions=true
            snyk auth $SNYK_TOKEN
      - run:
          name: Scan Java projects
          command: |
            mkdir vulnerabilities
            for SERVICE in "balancereader" "ledgerwriter" "transactionhistory"; do
              echo "Scanning $SERVICE"
              snyk test --file=src/$SERVICE/pom.xml --json-file-output=vulnerabilities/$SERVICE.json --severity-threshold=high 
            done
      - store_artifacts:
          path: vulnerabilities
  python-security-scan:
    parameters:
      service:
        type: string
    executor: python38
    steps:
      - checkout
      - run:
          name: Install Snyk CLI
          command: |
            if [[ ! -x "/usr/local/bin/snyk" ]]; then
              LATEST_SNYK_CLI_VERSION=$(curl https://static.snyk.io/cli/latest/version)
              echo "Downloading Snyk CLI version ${LATEST_SNYK_CLI_VERSION}"
              curl -sO --retry 6 https://static.snyk.io/cli/v${LATEST_SNYK_CLI_VERSION}/snyk-linux
              curl -sO --retry 6 https://static.snyk.io/cli/v${LATEST_SNYK_CLI_VERSION}/snyk-linux.sha256
              sha256sum -c snyk-linux.sha256
              sudo mv snyk-linux /usr/local/bin/snyk
              sudo chmod +x /usr/local/bin/snyk
            fi

            snyk config set disableSuggestions=true
            snyk auth $SNYK_TOKEN
      - restore_cache:
          key: venv-<<parameters.service>>-{{ checksum "src/<<parameters.service>>/requirements.txt" }}
      - run:
          name: Scan Python projects
          command: |
            cd src/<<parameters.service>>
            mkdir vulnerabilities
            echo "Installing dependencies for <<parameters.service>>"
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            echo "Scanning <<parameters.service>>"
            snyk test --file=requirements.txt --json-file-output=vulnerabilities/<<parameters.service>>.json --severity-threshold=high 
            deactivate
      - save_cache:
          key: venv-<<parameters.service>>-{{ checksum "src/<<parameters.service>>/requirements.txt" }}
          paths: [src/<<parameters.service>>/venv]
      - store_artifacts:
          path: src/<<parameters.service>>/vulnerabilities
