version: 2.1

orbs:
  gcp-cli: circleci/gcp-cli@2.4.1
  gcp-gcr: circleci/gcp-gcr@0.15.0
  gcp-gke: circleci/gcp-gke@1.4.0
  maven: circleci/maven@1.3.0
  slack: circleci/slack@4.10.1
  snyk: snyk/snyk@1.2.3

executors:
  base:
    docker:
      - image: cimg/base:stable
  jdk17:
    docker:
      - image: cimg/openjdk:17.0.3
  python38:
    docker:
      - image: cimg/python:3.8

workflows:
  build-test-deliver:
    jobs:
      - java-check-style
      - java-unit-tests:
          requires:
            - java-check-style
      - python-check-style
      - python-unit-tests:
          requires:
            - python-check-style
      - build-images:
          context: cloudSecrets
          tag: build-<<pipeline.number>>
          requires: [java-unit-tests, python-unit-tests]
      - security-scan:
          requires: [java-unit-tests, python-unit-tests]
      - deploy:
          name: deploy-dev
          context: [cloudSecrets, devCluster]
          requires: [build-images, security-scan]
      - slack/on-hold:
          name: notify-qa
          context: slack
          requires:
            - deploy-dev
      - qa-check:
          type: approval
          requires: [deploy-dev]
      - build-images:
          name: tag-images
          context: cloudSecrets
          tag: latest
          requires:
            - qa-check
      - deploy:
          name: deploy-prod
          context: [cloudSecrets, prodCluster]
          requires: [tag-images]

jobs:
  java-check-style:
    executor: jdk17
    steps:
      - checkout
      - run:
          name: Check style
          command: ./mvnw checkstyle:check
  java-unit-tests:
    executor: jdk17
    steps:
      - checkout
      - run:
          name: Create directory for test reports
          command: mkdir test-reports
      - maven/with_cache:
          verify_dependencies: false    
          steps: 
            - run: |
                ./mvnw test
                for SERVICE in "balancereader" "ledgerwriter" "transactionhistory"; do
                  echo "checking $SERVICE..."
                  # save current working dir to memory and cd to src/$SERVICE
                  pushd src/$SERVICE
                    ../../mvnw jacoco:report
                    echo "Coverage for $SERVICE:"
                    awk -F, \
                    '{ instructions += $4 + $5; covered += $5 } END \
                    { print covered, "/", instructions, " instructions covered"; \
                    print int(100*covered/instructions), "% covered" }' \
                    target/site/jacoco/jacoco.csv
                    cp target/surefire-reports/*.xml ../../test-reports
                  # return to previously saved path
                  popd
                done
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
  python-check-style:
    executor: python38
    steps:
      - checkout
      - run:
          name: Check style
          command: |
            pip install pylint
            pylint --rcfile=./.pylintrc ./src/*/*.py
  python-unit-tests:
    executor: python38
    steps:
      - checkout
      - run:
          name: Create directory for test reports
          command: mkdir test-reports
      - run:
          name: Run unit tests
          command: |
            for SERVICE in "contacts" "userservice"; do
              echo "testing $SERVICE..."
              # save current working dir to memory and cd to src/$SERVICE
              pushd src/$SERVICE
                python3 -m venv $HOME/venv-$SERVICE
                source $HOME/venv-$SERVICE/bin/activate
                pip install --upgrade pip
                pip install -r requirements.txt
                python -m pytest --junit-xml=../../test-reports/report-${SERVICE}.xml -v -p no:warnings
                python -m pytest --collect-only --cov-report=html:"test-reports/${SERVICE}-coverage-report.html" --cov=./ tests
                deactivate
              # return to previously saved path
              popd
            done
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
  build-images:
    parameters:
      tag:
        type: string
    executor: jdk17
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - run:
          name: Install skaffold
          command: |
            curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64 && \
            sudo install skaffold /usr/local/bin/
      - gcp-cli/install:
          version: "402.0.0"
      - gcp-cli/initialize
      - gcp-gcr/gcr-auth:
          registry-url: us-west2-docker.pkg.dev
      - run:
          name: Build and deliver images
          command: |
            # https://github.com/AwesomeCICD/bank-of-aion/blob/main/.circleci/config.yml#L117
            ./mvnw jib:_skaffold-fail-if-jib-out-of-date -Djib.requiredVersion=1.4.0 --projects src/ledgerwriter --also-make jib:_skaffold-files-v2 --quiet --batch-mode
            skaffold config set --global local-cluster false
            skaffold config set --global default-repo us-west2-docker.pkg.dev/olukotun-demo/boa
            skaffold build --tag=$CIRCLE_SHA1   
            skaffold build --tag=<<parameters.tag>>
  deploy:
    executor: jdk17
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - run:
          name: Install skaffold
          command: |
            curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64 && \
            sudo install skaffold /usr/local/bin/
      - gcp-cli/install:
          version: "402.0.0"
      - gcp-cli/initialize
      - gcp-gcr/gcr-auth:
          registry-url: us-west2-docker.pkg.dev
      - gcp-gke/install
      - gcp-gke/update-kubeconfig-with-credentials:
          cluster: $CLUSTER
      - run:
          name: Deploy images
          command: |
            skaffold config set --global local-cluster false
            skaffold config set --global default-repo us-west2-docker.pkg.dev/olukotun-demo/boa
            skaffold deploy --kubeconfig=$HOME/.kube/config --namespace=$NAMESPACE --tag=$CIRCLE_SHA1
      - run:
          name: Wait for frontend
          command: kubectl --namespace $NAMESPACE wait --for condition=Available=True --timeout=300s deployment/frontend
      - run:
          name: Get external IP
          command: kubectl --namespace $NAMESPACE get service frontend | awk '{print $4}'
  security-scan:
    executor: base
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - snyk/scan:
          additional-arguments: --all-projects
          severity-threshold: high
